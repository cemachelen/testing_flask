'''
Connect to the Database
The application will use a SQLite database to store users and posts.

1. g is a special object that is unique for each request. It is used to store data
that might be accessed by multiple functions during the request. The connection
is stored and reused instead of creating a new connection if get_db is called a
second time in the same request.
2. current_app is another special object that points to the Flask application
handling the request.
'''
import sqlite3

import click
from flask import current_app, g
from flask.cli import with_appcontext

# establish a connection file pointed at by the DATABASE config key
# file is generated by intialising the database
def get_db():
    if 'db' not in g:
        g.db = sqlite3.connect(
            current_app.config['DATABASE'],
            detect_types=sqlite3.PARSE_DECLTYPES
        )
        g.db.row_factory = sqlite3.Row

    return g.db


def close_db(e=None):
    db = g.pop('db', None)

    if db is not None:
        db.close()

# Run SQL commands in schema.sql (create empty tables)
def init_db():
    db = get_db()

    with current_app.open_resource('schema.sql') as f:
        db.executescript(f.read().decode('utf8'))


@click.command('init-db')
@with_appcontext
def init_db_command():
    """Clear the existing data and create new tables."""
    init_db()
    click.echo('Initialized the database.')
# Take an application and does the registration.
def init_app(app):
    app.teardown_appcontext(close_db)
    app.cli.add_command(init_db_command)
